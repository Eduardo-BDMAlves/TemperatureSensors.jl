var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = TemperatureSensors","category":"page"},{"location":"#TemperatureSensors","page":"Home","title":"TemperatureSensors","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for TemperatureSensors.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [TemperatureSensors]","category":"page"},{"location":"#TemperatureSensors.NotImplementerError","page":"Home","title":"TemperatureSensors.NotImplementerError","text":"NotImplementerError <: Exception\n\nThis error is used to flag if some functionality is not yet implemented.\n\n\n\n\n\n","category":"type"},{"location":"#TemperatureSensors.temperature-Tuple{Real, Sensor}","page":"Home","title":"TemperatureSensors.temperature","text":"temperature(parameter::Real, sensor::Sensor)\n\nBase function for generic type of sensor. This function trhows error as is the generic function which deals with\n\nArguments\n\nparameter::Real: the value of the independant variable. If for resistive sensors the value of resistance in ohms with which to compute the temperature.\nsensor::Sensor: the sensor used to measure temperature, any subtype of Sensor is valid.\n\nExample\n\njulia> temperature(100.0,ThermocoupleJ())\nERROR: TemperatureSensors.NotImplementerError()\n\nOutput\n\nnothing: the general implementation is used when the sensor is not implemented so both an error is thown and nothing value is returned.\n\n\n\n\n\n","category":"method"}]
}
